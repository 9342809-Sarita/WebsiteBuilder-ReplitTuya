datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Device {
  deviceId      String    @id
  name          String?
  productName   String?
  category      String?
  firstSeenUtc  DateTime?
  lastSeenUtc   DateTime?
  lastOnlineUtc DateTime?
  lastStatus    Json?
}

model DeviceSettings {
  id                 Int       @id @default(autoincrement())
  deviceId           String    @map("device_id")
  deviceName         String    @map("device_name")
  dataStorageEnabled Boolean   @map("data_storage_enabled")
  createdAt          DateTime? @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt @map("updated_at")
  
  @@unique([deviceId])
  @@map("device_settings")
}

model DeviceSpecs {
  id            Int       @id @default(autoincrement())
  deviceId      String    @map("device_id")
  deviceName    String    @map("device_name")
  specification String
  createdAt     DateTime? @default(now()) @map("created_at")
  updatedAt     DateTime? @updatedAt @map("updated_at")
  
  @@unique([deviceId])
  @@map("device_specs")
}

model RawEnergy {
  id        BigInt   @id @default(autoincrement())
  deviceId  String
  tsUtc     DateTime
  addEleKwh Decimal
  @@index([deviceId, tsUtc])
}

model RawHealth {
  id        BigInt   @id @default(autoincrement())
  deviceId  String
  tsUtc     DateTime
  powerW    Int?
  voltageV  Decimal?
  currentA  Decimal?
  pfEst     Decimal?
  online    Boolean?
  @@index([deviceId, tsUtc])
}

model Event {
  id       BigInt   @id @default(autoincrement())
  deviceId String
  tsUtc    DateTime
  type     String   // 'SAG','SWELL','OVERCURRENT','OVERPOWER','PF_LOW','OFFLINE','ONLINE'
  payload  Json?
  @@index([deviceId, tsUtc])
}

model DailyKwh {
  deviceId String
  dayIst   DateTime
  kwh      Decimal
  @@id([deviceId, dayIst])
}

model Rollup1m {
  id         BigInt   @id @default(autoincrement())
  deviceId   String
  windowUtc  DateTime
  avgPowerW  Int?
  minPowerW  Int?
  maxPowerW  Int?
  lastAddEle Decimal?
  kwh        Decimal?
  @@index([deviceId, windowUtc])
}

model Rollup15m {
  id        BigInt   @id @default(autoincrement())
  deviceId  String
  windowUtc DateTime
  avgPowerW Int?
  minPowerW Int?
  maxPowerW Int?
  kwh       Decimal?
  @@index([deviceId, windowUtc])
}

model Rollup1h {
  id        BigInt   @id @default(autoincrement())
  deviceId  String
  windowUtc DateTime
  avgPowerW Int?
  minPowerW Int?
  maxPowerW Int?
  kwh       Decimal?
  @@index([deviceId, windowUtc])
}

model AlertRule {
  id         BigInt   @id @default(autoincrement())
  name       String
  deviceId   String
  metric     String   // 'powerW' | 'voltageV' | 'currentA' | 'pfEst'
  op         String   // '>' | '>=' | '<' | '<=' | '==' | '!='
  threshold  Float
  durationS  Int      // how long condition must hold
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // optional cooldown to avoid spam (seconds)
  cooldownS  Int      @default(120)
  lastFired  DateTime?
  @@index([deviceId])
}

model AlertEvent {
  id        BigInt   @id @default(autoincrement())
  ruleId    BigInt
  deviceId  String
  tsUtc     DateTime
  value     Float
  message   String?
  acked     Boolean  @default(false)

  @@index([deviceId, tsUtc])
}

model PushSubscription {
  id         BigInt   @id @default(autoincrement())
  endpoint   String   @unique
  p256dh     String
  auth       String
  createdAt  DateTime @default(now())
  userHint   String?   // optional: "Mukesh's Pixel 7", etc.
}