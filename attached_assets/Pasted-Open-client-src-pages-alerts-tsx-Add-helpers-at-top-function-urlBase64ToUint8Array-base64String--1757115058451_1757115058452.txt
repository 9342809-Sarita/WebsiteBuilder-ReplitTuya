Open client/src/pages/alerts.tsx:

Add helpers at top:

function urlBase64ToUint8Array(base64String: string) {
  const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
  const raw = atob(base64);
  const output = new Uint8Array(raw.length);
  for (let i = 0; i < raw.length; ++i) output[i] = raw.charCodeAt(i);
  return output;
}


Add state:

const [pushReady, setPushReady] = useState(false);
const [pushEndpoint, setPushEndpoint] = useState<string | null>(null);
const [userHint, setUserHint] = useState("");


Register service worker once:

useEffect(() => {
  (async () => {
    if (!("serviceWorker" in navigator) || !("PushManager" in window)) return;
    const reg = await navigator.serviceWorker.register("/sw.js");
    if (reg) setPushReady(true);
  })();
}, []);


Add functions to subscribe/unsubscribe:

const subscribePush = async () => {
  if (!pushReady) return alert("Push not supported");
  const reg = await navigator.serviceWorker.ready;

  const { key } = await fetch("/api/push/public-key").then(r=>r.json());
  const sub = await reg.pushManager.subscribe({
    userVisibleOnly: true,
    applicationServerKey: urlBase64ToUint8Array(key),
  });
  setPushEndpoint(sub.endpoint);
  await fetch("/api/push/subscribe", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ subscription: sub.toJSON(), userHint }),
  });
  alert("Push notifications enabled.");
};

const unsubscribePush = async () => {
  const reg = await navigator.serviceWorker.ready;
  const sub = await reg.pushManager.getSubscription();
  if (sub) {
    await fetch("/api/push/unsubscribe", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ endpoint: sub.endpoint }),
    });
    await sub.unsubscribe();
    setPushEndpoint(null);
    alert("Push notifications disabled.");
  }
};


Add small UI block on the Alerts page (e.g., above “Create Alert Rule” card):

<Card>
  <CardHeader><CardTitle>Notifications</CardTitle></CardHeader>
  <CardContent className="grid sm:grid-cols-3 gap-3">
    <Input placeholder="Device hint (e.g., Mukesh’s Pixel)" value={userHint} onChange={e=>setUserHint(e.target.value)} />
    <Button onClick={subscribePush} disabled={!pushReady}>Enable Push</Button>
    <Button variant="secondary" onClick={unsubscribePush} disabled={!pushReady}>Disable Push</Button>
    {!pushReady && <div className="text-sm text-muted-foreground sm:col-span-3">Push requires HTTPS and a supported browser.</div>}
  </CardContent>
</Card>