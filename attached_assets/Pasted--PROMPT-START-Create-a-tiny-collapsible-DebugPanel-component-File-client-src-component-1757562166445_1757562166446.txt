=== PROMPT START ===
Create a tiny, collapsible DebugPanel component.

File: client/src/components/DebugPanel.tsx
--------------------------------
import { useState } from "react";
import { getDebugLastSample } from "../lib/api";

type Props = { deviceId: string };

export default function DebugPanel({ deviceId }: Props) {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [live, setLive] = useState(false);
  const [data, setData] = useState<any>(null);
  const [err, setErr] = useState<string | null>(null);

  async function refresh() {
    if (!deviceId) return;
    setLoading(true); setErr(null);
    try {
      const resp = await getDebugLastSample(deviceId, live);
      setData(resp);
    } catch (e:any) {
      setErr(e?.message || "Failed");
    } finally {
      setLoading(false);
    }
  }

  function percentDiff(a?: number|null, b?: number|null) {
    if (a==null || b==null || a===0) return null;
    return Math.round(((b - a) / a) * 100);
  }

  // quick check: W_est = V * A * PF
  const W_est = (() => {
    const v = data?.db?.health?.voltageV ?? null;
    const a = data?.db?.health?.currentA ?? null;
    const pf = data?.db?.health?.pfResolved ?? data?.db?.health?.pfTuya ?? data?.db?.health?.pfEst ?? null;
    if (v==null || a==null || pf==null) return null;
    return Math.round(v * a * pf);
  })();

  const W_meas = data?.db?.health?.powerW ?? null;
  const diff = percentDiff(W_meas, W_est);

  return (
    <div className="mt-3 rounded-xl border p-3">
      <div className="flex items-center justify-between">
        <div className="font-medium">Debug Panel</div>
        <div className="flex items-center gap-2">
          <label className="text-sm flex items-center gap-1">
            <input type="checkbox" checked={live} onChange={e => setLive(e.target.checked)} />
            Live Tuya
          </label>
          <button className="px-2 py-1 border rounded" onClick={refresh} disabled={!deviceId || loading}>
            {loading ? "Loading..." : "Refresh"}
          </button>
          <button className="px-2 py-1 border rounded" onClick={() => setOpen(o => !o)}>
            {open ? "Hide" : "Show"}
          </button>
        </div>
      </div>

      {open && (
        <div className="mt-3 grid gap-3 md:grid-cols-2">
          <div className="rounded border p-3">
            <div className="text-sm mb-2 opacity-70">DB Snapshot</div>
            {err && <div className="text-red-600 text-sm">{err}</div>}
            {!data ? (
              <div className="text-sm opacity-60">No data yet. Click Refresh.</div>
            ) : (
              <table className="text-sm w-full">
                <tbody>
                  <tr><td className="pr-3">Time</td><td>{data.db?.health?.ts || "—"}</td></tr>
                  <tr><td>Voltage</td><td>{data.db?.health?.voltageV ?? "—"} V</td></tr>
                  <tr><td>Current</td><td>{data.db?.health?.currentA ?? "—"} A</td></tr>
                  <tr><td>Power</td><td>{W_meas ?? "—"} W</td></tr>
                  <tr><td>PF (resolved)</td><td>{data.db?.health?.pfResolved ?? "—"}</td></tr>
                  <tr><td>PF (tuya)</td><td>{data.db?.health?.pfTuya ?? "—"}</td></tr>
                  <tr><td>PF (estimated)</td><td>{data.db?.health?.pfEst ?? "—"}</td></tr>
                  <tr><td className="pt-2">Sanity W ≈ V·A·PF</td>
                      <td className="pt-2">{W_est ?? "—"} W {diff!=null ? `(${diff}% vs measured)` : ""}</td></tr>
                </tbody>
              </table>
            )}
          </div>

          <div className="rounded border p-3">
            <div className="text-sm mb-2 opacity-70">Energy Increment</div>
            {data?.db?.energy ? (
              <table className="text-sm w-full">
                <tbody>
                  <tr><td className="pr-3">Time</td><td>{data.db.energy.ts}</td></tr>
                  <tr><td>addEleKwh</td><td>{data.db.energy.addEleKwh} kWh</td></tr>
                </tbody>
              </table>
            ) : <div className="text-sm opacity-60">No energy row</div>}
          </div>

          {live && (
            <div className="rounded border p-3 md:col-span-2">
              <div className="text-sm mb-2 opacity-70">Live Tuya Status</div>
              {data?.live?.error ? (
                <div className="text-red-600 text-sm">Fetch failed</div>
              ) : (
                <pre className="text-xs overflow-auto max-h-64 bg-gray-50 p-2 rounded">
                  {JSON.stringify(data?.live, null, 2)}
                </pre>
              )}
            </div>
          )}
        </div>
      )}
    </div>
  );
}
--------------------------------

Acceptance:
- Collapsible panel with Refresh + Live toggle.
- Shows DB values (V/A/W/PF) and last kWh increment.
- Optional JSON blob of raw Tuya status when Live is on.
=== PROMPT END ===
