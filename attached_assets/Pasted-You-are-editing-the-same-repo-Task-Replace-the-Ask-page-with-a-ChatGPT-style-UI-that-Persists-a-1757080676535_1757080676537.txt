You are editing the same repo.

Task: Replace the Ask page with a ChatGPT-style UI that:

Persists a sessionId in localStorage

Shows a scrollable transcript

Sends/receives via /api/ask POST

Can clear the chat with /api/ask/reset

Replace entire file client/src/pages/ask.tsx with:

// client/src/pages/ask.tsx
import { useEffect, useMemo, useRef, useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import { MessageSquare, Send, Trash2, Loader2, ArrowLeft } from "lucide-react";
import { Link } from "wouter";

type Role = "user" | "assistant";
type ChatMessage = { role: Role; content: string; ts: number };

const SID_KEY = "ask.sid.v1";
function getSessionId(): string {
  let sid = localStorage.getItem(SID_KEY);
  if (!sid) { sid = crypto.randomUUID(); localStorage.setItem(SID_KEY, sid); }
  return sid;
}

export default function AskPage() {
  const { toast } = useToast();
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const sessionId = useMemo(getSessionId, []);
  const scrollerRef = useRef<HTMLDivElement | null>(null);

  useEffect(() => {
    (async () => {
      try {
        const r = await fetch(`/api/ask/history?sessionId=${encodeURIComponent(sessionId)}`);
        const j = await r.json();
        if (j.ok) setMessages(j.history || []);
      } catch { /* ignore */ }
    })();
  }, [sessionId]);

  useEffect(() => {
    const el = scrollerRef.current;
    if (el) el.scrollTo({ top: el.scrollHeight, behavior: "smooth" });
  }, [messages]);

  const ask = async () => {
    const q = input.trim();
    if (!q) return;
    setIsLoading(true);
    setInput("");

    setMessages(m => [...m, { role: "user", content: q, ts: Date.now() }]);

    try {
      const r = await fetch("/api/ask", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ q, sessionId }),
      });
      const j = await r.json();
      if (!j.ok) throw new Error(j.error || "Ask failed");
      setMessages(j.history || []);
    } catch (e: any) {
      toast({
        title: "Ask AI failed",
        description: e?.message || String(e),
        variant: "destructive",
      });
      setMessages(m => m.slice(0, -1)); // rollback optimistic user msg
    } finally {
      setIsLoading(false);
    }
  };

  const handleKey = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      ask();
    }
  };

  const resetChat = async () => {
    try {
      const r = await fetch("/api/ask/reset", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sessionId }),
      });
      const j = await r.json();
      if (j.ok) setMessages([]);
    } catch { /* ignore */ }
  };

  return (
    <div className="min-h-screen bg-background">
      <main className="mx-auto max-w-4xl p-4 md:p-8">
        <div className="flex items-center gap-2 mb-4">
          <Link href="/"><Button variant="ghost" size="icon"><ArrowLeft className="w-4 h-4" /></Button></Link>
          <h1 className="text-2xl font-semibold flex items-center gap-2">
            <MessageSquare className="w-5 h-5" /> Ask AI
          </h1>
        </div>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle>Chat (session scoped)</CardTitle>
            <Button variant="outline" size="sm" onClick={resetChat} disabled={isLoading}>
              <Trash2 className="w-4 h-4 mr-1" /> Clear chat
            </Button>
          </CardHeader>

          <CardContent>
            <div ref={scrollerRef} className="h-[60vh] overflow-y-auto rounded-lg border p-3 space-y-3">
              {messages.length === 0 && (
                <Alert><AlertDescription>Start a conversation below. Messages are remembered during this session.</AlertDescription></Alert>
              )}

              {messages.map((m, i) => (
                <div key={i} className={`flex ${m.role === "user" ? "justify-end" : "justify-start"}`}>
                  <div className={`max-w-[85%] whitespace-pre-wrap px-3 py-2 rounded-2xl shadow-sm text-sm
                    ${m.role === "user" ? "bg-primary text-primary-foreground rounded-br-none" : "bg-muted rounded-bl-none"}`}>
                    {m.content}
                  </div>
                </div>
              ))}

              {isLoading && <div className="text-sm text-muted-foreground">Thinking…</div>}
            </div>

            <div className="mt-4 flex flex-col gap-2">
              <Textarea
                placeholder="Ask about your devices, energy, status… (Shift+Enter for newline)"
                value={input}
                onChange={e => setInput(e.target.value)}
                onKeyDown={handleKey}
                rows={3}
              />
              <div className="flex gap-2 justify-end">
                <Button onClick={ask} disabled={isLoading || input.trim().length === 0}>
                  {isLoading ? <Loader2 className="w-4 h-4 mr-2 animate-spin" /> : <Send className="w-4 h-4 mr-2" />}
                  Send
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}


Do not change other files.
Return only: “Ask page replaced.”