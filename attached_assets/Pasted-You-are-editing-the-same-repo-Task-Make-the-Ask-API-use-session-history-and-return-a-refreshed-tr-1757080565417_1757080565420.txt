You are editing the same repo.

Task: Make the Ask API use session history and return a refreshed transcript.

Replace entire file server/ask.ts with:

// server/ask.ts
import type { Request, Response } from "express";
import { askLLMWithHistory, samplePoints } from "./ai";
import { getHistory, appendMessage, resetSession } from "./chat-store";

// Build a compact context object; wire in your existing stats calls if needed
async function buildContext(req: Request) {
  const url = new URL(req.originalUrl, `http://${req.headers.host}`);
  const params = url.searchParams;

  const deviceIds = (params.get("deviceIds") || "")
    .split(",")
    .map(s => s.trim())
    .filter(Boolean);

  const gran = params.get("gran") || "day";
  const start = params.get("start") || "";
  const end = params.get("end") || "";

  const context = {
    timeRange: { start, end },
    granularity: gran,
    devicesQueried: deviceIds,
    // Add downsampled series/summary objects here if available
  };

  return context;
}

/**
 * POST /api/ask
 * body: { q: string, sessionId: string }
 * (GET /api/ask?q=...&sessionId=... also supported)
 */
export async function handleAsk(req: Request, res: Response) {
  try {
    const isPost = req.method.toUpperCase() === "POST";
    const q = (isPost ? (req.body?.q ?? "") : (req.query.q ?? "")) as string;
    const sessionId = (isPost ? (req.body?.sessionId ?? "") : (req.query.sessionId ?? "")) as string;

    if (!q) return res.status(400).json({ ok: false, error: "Missing q" });
    if (!sessionId) return res.status(400).json({ ok: false, error: "Missing sessionId" });

    const context = await buildContext(req);

    const userContent =
      "Question:\n" + q +
      "\n\nContext JSON (compact):\n" + JSON.stringify(context).slice(0, 120_000);

    const history = getHistory(sessionId);
    const answer = await askLLMWithHistory({ history, userContent });

    appendMessage(sessionId, { role: "user", content: q, ts: Date.now() });
    appendMessage(sessionId, { role: "assistant", content: answer, ts: Date.now() });

    res.json({
      ok: true,
      answer,
      sessionId,
      history: getHistory(sessionId),
    });
  } catch (e: any) {
    console.error("Ask AI error:", e);
    res.status(500).json({ ok: false, error: String(e) });
  }
}

/**
 * GET /api/ask/history?sessionId=...
 */
export async function getAskHistory(req: Request, res: Response) {
  const sessionId = String(req.query.sessionId || "");
  if (!sessionId) return res.status(400).json({ ok: false, error: "Missing sessionId" });
  res.json({ ok: true, sessionId, history: getHistory(sessionId) });
}

/**
 * POST /api/ask/reset  body: { sessionId: string }
 */
export async function resetAsk(req: Request, res: Response) {
  const sessionId = String(req.body?.sessionId || "");
  if (!sessionId) return res.status(400).json({ ok: false, error: "Missing sessionId" });
  resetSession(sessionId);
  res.json({ ok: true, sessionId, history: [] });
}


Do not change other files yet.
Return only: “Ask API upgraded.”