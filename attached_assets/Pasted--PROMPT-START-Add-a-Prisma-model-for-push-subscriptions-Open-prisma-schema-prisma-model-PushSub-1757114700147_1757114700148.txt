[PROMPT START]

Add a Prisma model for push subscriptions. Open prisma/schema.prisma:

model PushSubscription {
  id         BigInt   @id @default(autoincrement())
  endpoint   String   @unique
  p256dh     String
  auth       String
  createdAt  DateTime @default(now())
  userHint   String?   // optional: "Mukesh's Pixel 7", etc.
}


Run:

npx prisma generate

npx prisma migrate dev --name push_subscriptions

Install server deps:

npm i web-push

Generate VAPID keys (one time, save output):

npx web-push generate-vapid-keys
Set the three env vars (in Replit Secrets):
VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY, VAPID_SUBJECT (e.g., mailto:you@example.com).

Create server/push.ts:

// server/push.ts
import webpush from "web-push";
import { PrismaClient } from "@prisma/client";
const prisma = new PrismaClient();

const VAPID_PUBLIC_KEY = process.env.VAPID_PUBLIC_KEY!;
const VAPID_PRIVATE_KEY = process.env.VAPID_PRIVATE_KEY!;
const VAPID_SUBJECT = process.env.VAPID_SUBJECT || "mailto:admin@example.com";

webpush.setVapidDetails(VAPID_SUBJECT, VAPID_PUBLIC_KEY, VAPID_PRIVATE_KEY);

export async function saveSubscription(sub: any, userHint?: string) {
  const { endpoint, keys } = sub;
  try {
    await prisma.pushSubscription.upsert({
      where: { endpoint },
      update: { p256dh: keys.p256dh, auth: keys.auth, userHint },
      create: { endpoint, p256dh: keys.p256dh, auth: keys.auth, userHint },
    });
  } catch (e) { /* ignore dup */ }
}

export async function deleteSubscription(endpoint: string) {
  try { await prisma.pushSubscription.delete({ where: { endpoint } }); } catch {}
}

export async function sendPushAll(payload: any) {
  const subs = await prisma.pushSubscription.findMany({ take: 5000 });
  const msg = JSON.stringify(payload);
  await Promise.all(subs.map(async s => {
    try {
      await webpush.sendNotification({
        endpoint: s.endpoint,
        expirationTime: null,
        keys: { p256dh: s.p256dh, auth: s.auth }
      } as any, msg);
    } catch (err: any) {
      // cleanup gone endpoints
      if (err?.statusCode === 410 || err?.statusCode === 404) {
        await deleteSubscription(s.endpoint);
      }
    }
  }));
}

export function getVapidPublicKey() { return VAPID_PUBLIC_KEY; }


Create routes server/routes/push.ts:

import { Router } from "express";
import { saveSubscription, deleteSubscription, getVapidPublicKey } from "../push";
const r = Router();

r.get("/push/public-key", (_req, res) => {
  res.json({ ok: true, key: getVapidPublicKey() });
});

r.post("/push/subscribe", async (req, res) => {
  const { subscription, userHint } = req.body || {};
  if (!subscription?.endpoint || !subscription?.keys?.p256dh || !subscription?.keys?.auth) {
    return res.status(400).json({ ok: false, error: "Invalid subscription" });
  }
  await saveSubscription(subscription, userHint);
  res.json({ ok: true });
});

r.post("/push/unsubscribe", async (req, res) => {
  const { endpoint } = req.body || {};
  if (!endpoint) return res.status(400).json({ ok: false, error: "Missing endpoint" });
  await deleteSubscription(endpoint);
  res.json({ ok: true });
});

export default r;


Wire routes in server/routes.ts:

import pushRouter from "./routes/push";
app.use("/api", pushRouter);


[PROMPT END]