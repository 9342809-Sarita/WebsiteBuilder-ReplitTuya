Replit Prompt (paste this in one go)
You are Replit’s code generator. Create a full-stack project that **mimics TP-Link Tapo’s Energy Monitoring UI** but reads data from my existing backend API (read-only: no control, no push). Use:

- Frontend: React + Vite, Recharts, date-fns-tz, Zustand (state), react-router.
- Backend: Node 18 + Express + CORS. The backend will **proxy** to an upstream data API I’ll configure via env (e.g., my Tuya proxy). No DB needed.

===============================
FEATURES / UX (match Tapo UI)
===============================
1) Devices page
   - Multi-select of smart plugs (checkbox list + search).
   - Combined view: when multiple devices selected, aggregate energy.
   - Each device tile shows: name, online/offline, last update.

2) Dashboard page (for current selection)
   - Cards:
     - Current Power (watts), auto-refresh ~5s.
     - Today’s Consumption (kWh) — midnight→now.
     - Past 30 Days (kWh) total.
   - "Set Electricity Rate" (₹/kWh) → shows estimated cost for Today & Past 30 Days.

3) Energy screen (detailed)
   - Granularity toggle: Day / Month / Year.
     * Day: last 24h bar/area chart, 1-hour buckets.
     * Month: last 30 days, daily buckets.
     * Year: last 12 months, monthly buckets.
   - Calendar date picker (left/right arrows + date popover) to jump to any date range.
   - Tooltip with bucket sum, min/max, avg; legend for selected devices.
   - Export CSV of the plotted series.

4) Timezone / locale
   - Use Asia/Kolkata (IST) for bucketing/labels and the client UI.
   - All date math done in local time (IST), but show ISO hover detail.

5) No control, no notifications. This is read-only visualization.

===============================
API CONTRACT (backend → upstream)
===============================
Backend will expose:
  GET /api/devices
    -> [{ id, name, online, category }]

  GET /api/live?deviceId=...           # current power (W)
    -> { deviceId, watts, ts }

  GET /api/summary?deviceIds=...       # today & past30 totals
    -> { todayKWh, past30DaysKWh, perDevice: [{id, todayKWh, past30DaysKWh}] }

  GET /api/series?deviceIds=...&granularity=day|month|year&start=ISO&end=ISO
    -> { granularity, tz: "Asia/Kolkata",
         series: [
           { deviceId, points: [{ t: ISO, kWh: number }, ...] }
         ] }

The backend will proxy to an UPSTREAM_BASE_URL set by env (e.g., my Tuya proxy) and forward bearer token if UPSTREAM_BEARER is set. No writing endpoints.

===============================
FILE TREE
===============================
- package.json
- server/
  - index.js
  - proxy.js
  - agg.js
- client/
  - index.html
  - vite.config.js
  - package.json
  - src/
    - main.jsx
    - App.jsx
    - pages/
      - Devices.jsx
      - Dashboard.jsx
      - Energy.jsx
    - components/
      - DevicePicker.jsx
      - Cards.jsx
      - ChartPanel.jsx
      - CalendarPicker.jsx
    - store/useAppStore.js
    - lib/date.js
    - lib/api.js
    - styles.css
- .replit

===============================
ROOT package.json
===============================
{
  "name": "tapo-like-energy-ui",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "npm-run-all -p dev:server dev:client",
    "dev:server": "node server/index.js",
    "dev:client": "cd client && npm run dev",
    "build": "cd client && npm run build",
    "start": "node server/index.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "date-fns-tz": "^3.1.3",
    "express": "^4.19.2",
    "node-fetch": "^3.3.2"
  },
  "devDependencies": {
    "npm-run-all": "^4.1.5"
  }
}

===============================
server/index.js
===============================
import express from "express";
import cors from "cors";
import { proxyDevices, proxyLive, proxySummary, proxySeries } from "./proxy.js";

const app = express();
app.use(cors());
app.use(express.json());

app.get("/api/health", (req, res) => {
  res.json({ ok: true, tz: "Asia/Kolkata" });
});

app.get("/api/devices", proxyDevices);
app.get("/api/live", proxyLive);
app.get("/api/summary", proxySummary);
app.get("/api/series", proxySeries);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log("Server on :" + PORT));

===============================
server/proxy.js
===============================
import fetch from "node-fetch";
import { aggregateSeries } from "./agg.js";

const BASE = process.env.UPSTREAM_BASE_URL;   // e.g. https://<your-tuya-proxy>
const BEARER = process.env.UPSTREAM_BEARER || ""; // optional

function headers(extra={}) {
  const h = { "Content-Type": "application/json", ...extra };
  if (BEARER) h.Authorization = "Bearer " + BEARER;
  return h;
}

export async function proxyDevices(req, res) {
  try {
    const r = await fetch(BASE + "/devices", { headers: headers() });
    const j = await r.json();
    res.json(j);
  } catch (e) { res.status(500).json({ error: "devices", detail: String(e) }); }
}

export async function proxyLive(req, res) {
  try {
    const url = new URL(BASE + "/live");
    url.search = new URLSearchParams({ deviceId: req.query.deviceId }).toString();
    const r = await fetch(url, { headers: headers() });
    const j = await r.json();
    res.json(j);
  } catch (e) { res.status(500).json({ error: "live", detail: String(e) }); }
}

export async function proxySummary(req, res) {
  try {
    const url = new URL(BASE + "/summary");
    url.search = new URLSearchParams({ deviceIds: req.query.deviceIds }).toString();
    const r = await fetch(url, { headers: headers() });
    const j = await r.json();
    res.json(j);
  } catch (e) { res.status(500).json({ error: "summary", detail: String(e) }); }
}

// Optionally allow the server to aggregate multiple device series locally
export async function proxySeries(req, res) {
  try {
    const url = new URL(BASE + "/series");
    url.search = new URLSearchParams({
      deviceIds: req.query.deviceIds,
      granularity: req.query.granularity,
      start: req.query.start,
      end: req.query.end
    }).toString();
    const r = await fetch(url, { headers: headers() });
    const j = await r.json();
    // Normalize + aggregate if upstream returns per-device arrays
    const out = aggregateSeries(j);
    res.json(out);
  } catch (e) { res.status(500).json({ error: "series", detail: String(e) }); }
}

===============================
server/agg.js
===============================
export function aggregateSeries(resp) {
  // Expect { series: [{deviceId, points:[{t,kWh}]}], granularity, tz }
  // Ensure unique time keys and add combined totals
  const g = resp?.granularity || "day";
  const tz = resp?.tz || "Asia/Kolkata";
  const series = Array.isArray(resp?.series) ? resp.series : [];

  const map = new Map(); // t -> sum kWh
  for (const s of series) {
    for (const p of s.points || []) {
      const key = p.t;
      map.set(key, (map.get(key) || 0) + (Number(p.kWh) || 0));
    }
  }
  const combined = [...map.entries()].sort(([a],[b]) => a.localeCompare(b))
    .map(([t, kWh]) => ({ t, kWh }));

  return { granularity: g, tz, series, combined };
}

===============================
client/package.json
===============================
{
  "name": "tapo-like-energy-ui-client",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@tanstack/react-router": "^1.59.7",
    "date-fns": "^3.6.0",
    "date-fns-tz": "^3.1.3",
    "recharts": "^2.12.7",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "zustand": "^4.5.2"
  },
  "devDependencies": {
    "vite": "^5.4.0",
    "@vitejs/plugin-react": "^4.2.0"
  }
}

===============================
client/vite.config.js
===============================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

export default defineConfig({
  plugins: [react()],
  server: {
    port: 5173,
    proxy: { "/api": "http://localhost:3000" }
  }
});

===============================
client/index.html
===============================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tapo-like Energy UI</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

===============================
client/src/main.jsx
===============================
import React from "react";
import { createRoot } from "react-dom/client";
import { createRouter, RouterProvider } from "@tanstack/react-router";
import App from "./App.jsx";
import Devices from "./pages/Devices.jsx";
import Dashboard from "./pages/Dashboard.jsx";
import Energy from "./pages/Energy.jsx";
import "./styles.css";

const routeTree = [
  { path: "/", element: <App />, children: [
    { path: "/", element: <Devices /> },
    { path: "/dashboard", element: <Dashboard /> },
    { path: "/energy", element: <Energy /> }
  ]}
];

const router = createRouter({ routeTree });
createRoot(document.getElementById("root")).render(<RouterProvider router={router} />);

===============================
client/src/App.jsx
===============================
import React from "react";
import { Link, Outlet } from "@tanstack/react-router";

export default function App() {
  return (
    <div className="layout">
      <header>
        <h1>Tapo-like Energy Monitoring</h1>
        <nav>
          <Link to="/">Devices</Link>
          <Link to="/dashboard">Dashboard</Link>
          <Link to="/energy">Energy</Link>
        </nav>
      </header>
      <main><Outlet /></main>
      <footer>Read-only • Asia/Kolkata</footer>
    </div>
  );
}

===============================
client/src/pages/Devices.jsx
===============================
import React, { useEffect, useState } from "react";
import { useAppStore } from "../store/useAppStore.js";
import DevicePicker from "../components/DevicePicker.jsx";

export default function Devices() {
  const { devices, setDevices } = useAppStore();
  const [error, setError] = useState("");

  useEffect(() => {
    (async () => {
      try {
        const r = await fetch("/api/devices");
        const j = await r.json();
        const list = j?.result?.list || j?.result || j || [];
        setDevices(list);
      } catch (e) { setError(String(e)); }
    })();
  }, [setDevices]);

  return (
    <div className="page">
      <h2>Devices</h2>
      {error && <p className="err">{error}</p>}
      <DevicePicker />
    </div>
  );
}

===============================
client/src/pages/Dashboard.jsx
===============================
import React, { useEffect, useState } from "react";
import { useAppStore } from "../store/useAppStore.js";
import Cards from "../components/Cards.jsx";

export default function Dashboard() {
  const { selection } = useAppStore();
  const [data, setData] = useState(null);
  const [live, setLive] = useState(null);
  const [error, setError] = useState("");

  // today & past30
  useEffect(() => {
    if (!selection.length) return;
    const ids = selection.join(",");
    fetch(`/api/summary?deviceIds=${encodeURIComponent(ids)}`)
      .then(r => r.json()).then(setData).catch(e => setError(String(e)));
  }, [selection]);

  // live refresh ~5s (like Tapo)
  useEffect(() => {
    if (selection.length !== 1) { setLive(null); return; }
    const id = selection[0];
    let timer;
    async function pull() {
      try {
        const r = await fetch(`/api/live?deviceId=${encodeURIComponent(id)}`);
        const j = await r.json();
        setLive(j);
      } catch (e) { /* ignore one-offs */ }
      timer = setTimeout(pull, 5000);
    }
    pull();
    return () => timer && clearTimeout(timer);
  }, [selection]);

  return (
    <div className="page">
      <h2>Dashboard</h2>
      {!selection.length && <p>Select at least one device on Devices page.</p>}
      <Cards data={data} live={live} />
    </div>
  );
}

===============================
client/src/pages/Energy.jsx
===============================
import React, { useEffect, useMemo, useState } from "react";
import { useAppStore } from "../store/useAppStore.js";
import ChartPanel from "../components/ChartPanel.jsx";
import CalendarPicker from "../components/CalendarPicker.jsx";

export default function Energy() {
  const { selection } = useAppStore();
  const [gran, setGran] = useState("day"); // day | month | year
  const [range, setRange] = useState(() => {
    const end = new Date();
    const start = new Date(end); start.setDate(end.getDate() - 1);
    return { start, end };
  });
  const [resp, setResp] = useState(null);
  const [error, setError] = useState("");

  const q = useMemo(() => {
    const ids = selection.join(",");
    return `/api/series?deviceIds=${encodeURIComponent(ids)}&granularity=${gran}&start=${range.start.toISOString()}&end=${range.end.toISOString()}`;
  }, [selection, gran, range]);

  useEffect(() => {
    if (!selection.length) return;
    fetch(q).then(r => r.json()).then(setResp).catch(e => setError(String(e)));
  }, [q, selection]);

  return (
    <div className="page">
      <h2>Energy Usage</h2>
      <div className="toolbar">
        <div className="seg">
          <button className={gran==="day"?"on":""} onClick={()=>setGran("day")}>Day</button>
          <button className={gran==="month"?"on":""} onClick={()=>setGran("month")}>Month</button>
          <button className={gran==="year"?"on":""} onClick={()=>setGran("year")}>Year</button>
        </div>
        <CalendarPicker range={range} onChange={setRange} />
        <a id="export" download="energy.csv" href={"data:text/csv;charset=utf-8," + encodeURIComponent(toCSV(resp))}>Export CSV</a>
      </div>
      {error && <p className="err">{error}</p>}
      <ChartPanel resp={resp} gran={gran} />
    </div>
  );
}

function toCSV(resp){
  if (!resp?.combined) return "t,kWh\n";
  const rows = resp.combined.map(p => `${p.t},${p.kWh ?? 0}`);
  return "t,kWh\n" + rows.join("\n");
}

===============================
client/src/components/DevicePicker.jsx
===============================
import React from "react";
import { useAppStore } from "../store/useAppStore.js";

export default function DevicePicker() {
  const { devices, selection, toggle } = useAppStore();
  return (
    <div className="device-picker">
      {devices.map(d => (
        <label key={d.id || d.device_id}>
          <input type="checkbox"
            checked={selection.includes(d.id || d.device_id)}
            onChange={()=>toggle(d.id || d.device_id)} />
          <span>{d.name}</span>
        </label>
      ))}
      {!devices.length && <p>No devices found.</p>}
    </div>
  );
}

===============================
client/src/components/Cards.jsx
===============================
import React, { useMemo, useState } from "react";

export default function Cards({ data, live }) {
  const [rate, setRate] = useState(8.0); // ₹/kWh default
  const today = data?.todayKWh || 0;
  const past30 = data?.past30DaysKWh || 0;

  const todayCost = useMemo(()=> (today*rate).toFixed(2), [today, rate]);
  const past30Cost = useMemo(()=> (past30*rate).toFixed(2), [past30, rate]);

  return (
    <div className="cards">
      <div className="card">
        <h3>Current Power</h3>
        <p className="big">{live?.watts ?? "—"} W</p>
        <small>Auto-refresh ~5s</small>
      </div>
      <div className="card">
        <h3>Today</h3>
        <p className="big">{today.toFixed(3)} kWh</p>
        <small>Cost ≈ ₹{todayCost}</small>
      </div>
      <div className="card">
        <h3>Past 30 Days</h3>
        <p className="big">{past30.toFixed(3)} kWh</p>
        <small>Cost ≈ ₹{past30Cost}</small>
      </div>
      <div className="card">
        <h3>Electricity Rate</h3>
        <input type="number" step="0.1" value={rate} onChange={e=>setRate(Number(e.target.value||0))} />
        <small>₹/kWh</small>
      </div>
    </div>
  );
}

===============================
client/src/components/CalendarPicker.jsx
===============================
import React from "react";

export default function CalendarPicker({ range, onChange }) {
  const addDays = (n) => {
    const start = new Date(range.start), end = new Date(range.end);
    start.setDate(start.getDate()+n); end.setDate(end.getDate()+n);
    onChange({ start, end });
  };
  return (
    <div className="cal">
      <button onClick={()=>addDays(-1)}>◀</button>
      <span>{range.start.toISOString().slice(0,10)} → {range.end.toISOString().slice(0,10)}</span>
      <button onClick={()=>addDays(1)}>▶</button>
    </div>
  );
}

===============================
client/src/components/ChartPanel.jsx
===============================
import React, { useMemo } from "react";
import { AreaChart, Area, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from "recharts";

export default function ChartPanel({ resp, gran }) {
  const combined = resp?.combined || [];
  const series = resp?.series || [];

  const data = useMemo(()=>{
    // Merge series into recharts rows keyed by t
    const rows = new Map();
    for (const s of series) {
      for (const p of s.points || []) {
        const key = p.t;
        const row = rows.get(key) || { t: key };
        row[s.deviceId] = (row[s.deviceId] || 0) + (Number(p.kWh)||0);
        rows.set(key, row);
      }
    }
    // Also include combined for stacked/total
    for (const p of combined) {
      const row = rows.get(p.t) || { t: p.t };
      row.total = p.kWh;
      rows.set(p.t, row);
    }
    return [...rows.values()].sort((a,b)=> a.t.localeCompare(b.t));
  }, [series, combined]);

  const Chart = gran==="day" ? AreaChart : BarChart;

  return (
    <div className="chart">
      <ResponsiveContainer width="100%" height={360}>
        <Chart data={data} margin={{ top: 10, right: 20, bottom: 0, left: 0 }}>
          <XAxis dataKey="t" />
          <YAxis />
          <Tooltip />
          <Legend />
          {gran==="day" ? <Area dataKey="total" type="monotone" fillOpacity={0.3} /> : <Bar dataKey="total" /> }
        </Chart>
      </ResponsiveContainer>
      <small>Units: kWh per bucket; bucket = hour (Day), day (Month), month (Year).</small>
    </div>
  );
}

===============================
client/src/store/useAppStore.js
===============================
import { create } from "zustand";

export const useAppStore = create((set, get) => ({
  devices: [],
  selection: [],
  setDevices: (d) => set({ devices: d }),
  toggle: (id) => {
    const cur = get().selection;
    set({ selection: cur.includes(id) ? cur.filter(x=>x!==id) : [...cur, id] });
  }
}));

===============================
client/src/lib/api.js
===============================
export async function api(path) {
  const r = await fetch(path);
  if (!r.ok) throw new Error(await r.text());
  return r.json();
}

===============================
client/src/lib/date.js
===============================
/* placeholder for any IST/formatter helpers if needed later */

===============================
client/src/styles.css
===============================
:root { --pad: 16px; --muted: #666; }
* { box-sizing: border-box; }
body { font-family: system-ui, Arial, sans-serif; margin: 0; color: #111; }
header { display: flex; gap: 24px; align-items: center; padding: var(--pad); border-bottom: 1px solid #eee; }
nav a { margin-right: 12px; text-decoration: none; color: #06f; }
.layout main { padding: var(--pad); max-width: 1100px; margin: 0 auto; }
footer { padding: var(--pad); border-top: 1px solid #eee; color: var(--muted); }
.page h2 { margin-top: 0; }
.err { color: #b00020; }
.device-picker { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 8px; }
.cards { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 12px; margin-top: 8px; }
.card { border: 1px solid #eee; border-radius: 12px; padding: 12px; }
.card .big { font-size: 28px; margin: 4px 0; }
.toolbar { display: flex; gap: 12px; align-items: center; margin-bottom: 12px; flex-wrap: wrap; }
.seg button { padding: 6px 10px; border: 1px solid #ddd; background: #fff; cursor: pointer; }
.seg .on { background: #06f; color: #fff; border-color: #06f; }
.cal { display: flex; gap: 10px; align-items: center; }
.chart { border: 1px solid #eee; border-radius: 12px; padding: 12px; }

How this maps to Tapo’s UI

Current power (5s), Today, Past 30 Days → dashboard cards, same cadence/metrics as Tapo’s energy dashboard. 
TP-Link

Energy Usage with Day/Month/Year graphs & calendar selection → “Energy Monitoring 2.0” behaviors. 
TP-Link Community
Tapo

Energy Usage path (device → “Energy Usage” → “Show More”) → deep-dive screen equivalent. 
TP-Link
+1

What you set in Replit

Paste the entire prompt above into “Prompt to code” and submit.

Set Secrets for the proxy to your upstream (whatever returns the documented /devices, /live, /summary, /series):

UPSTREAM_BASE_URL = https://<your-tuya-proxy-host>

UPSTREAM_BEARER = <if your proxy requires a bearer token>

PORT = 3000

Click Run → open the webview.

If you want, I can package this as a downloadable .txt so you can upload it directly to Replit.

Worked for 1 minute

According to TP‑Link’s official FAQ and forum posts on the Tapo Plug Energy Monitoring 2.0 feature, the Tapo app’s energy dashboard displays three core data points: Today’s power consumption (midnight to now), Past 30‑day consumption, and Current power which refreshes roughly every five seconds
tp-link.com
. In the “Energy Usage & Power Graphs” section, users can view total power consumption as line or bar charts by Day, Month, or Year—where Day shows the past 24 hours with hourly granularity, Month shows the past 30 days with daily granularity, and Year shows the past 12 months with monthly granularity
tp-link.com
. The app also includes an Energy Calendar, letting users select dates over the past three months to display daily power consumption and monthly electric bills, with color coding to indicate low, average, and high usage
tp-link.com
. There is an Electric Bill calculator that allows inputting an electricity rate and supports fixed (singular) or variable (periodic) billing schemes
tp-link.com
.

Replit prompt to build a Tapo‑style energy dashboard

Below is a single “Prompt to code” you can paste into Replit to scaffold a full‑stack app that matches the Tapo app’s energy monitoring UI. It creates a Node/Express backend to proxy your own data source (e.g., your Tuya proxy) and a React/Vite frontend using Recharts and date‑fns. It supports multiple device selection, real‑time power updates, daily/30‑day/12‑month consumption graphs, a calendar picker, and an electricity‑cost calculator. No control actions or notifications are included (read‑only).

You are Replit’s code generator. Create a full‑stack project replicating TP‑Link Tapo’s Energy Monitoring dashboard (read‑only).

===============================
FEATURES / UX SPEC (match Tapo)
===============================
1) **Device picker**: multi‑select smart plugs; aggregated view when multiple devices selected.
2) **Dashboard cards**:
   - Current Power (watts), auto‑refresh every ~5s.
   - Today’s consumption (kWh) from 00:00–now.
   - Past 30‑day consumption (kWh).
   - Electricity rate input (₹/kWh) with cost estimates for Today and Past 30 days.
3) **Energy Usage page**:
   - Tabs for Day/Month/Year graphs matching Tapo:
     * Day: past 24 h, 1‑hour buckets:contentReference[oaicite:4]{index=4}.
     * Month: past 30 d, 1‑day buckets:contentReference[oaicite:5]{index=5}.
     * Year: past 12 m, 1‑month buckets:contentReference[oaicite:6]{index=6}.
   - **Calendar picker** to choose any date range (max 3 months) with color‑coded usage bars like Tapo’s Energy Calendar:contentReference[oaicite:7]{index=7}.
   - Export to CSV.
4) **Bill calculator**: uses the entered electricity rate (singular or variable; variable fields optional) to estimate cost:contentReference[oaicite:8]{index=8}.
5) **Backend API**: Expose routes:
   - `GET /api/devices` → list devices.
   - `GET /api/live?deviceId=...` → current power.
   - `GET /api/summary?deviceIds=...` → today & past30 totals.
   - `GET /api/series?deviceIds=...&granularity=day|month|year&start=ISO&end=ISO` → time‑series buckets.
   These routes proxy to an upstream data source (set `UPSTREAM_BASE_URL` env var).

===============================
STACK
===============================
- Backend: Node 18, Express, CORS, node‑fetch.
- Frontend: React + Vite, Recharts, date‑fns, Zustand (state), tanstack/react‑router.
- Use Asia/Kolkata timezone by default.
- No control or notifications.

===============================
FILE STRUCTURE
===============================
- package.json
- server/
  - index.js
  - proxy.js (handles upstream calls)
  - agg.js (aggregates series)
- client/
  - index.html
  - vite.config.js
  - package.json
  - src/
    - main.jsx
    - App.jsx
    - pages/Devices.jsx, Dashboard.jsx, Energy.jsx
    - components/
      - DevicePicker.jsx
      - Cards.jsx
      - ChartPanel.jsx
      - CalendarPicker.jsx
    - store/useAppStore.js
    - lib/api.js
    - styles.css
- .replit

===============================
SETUP & ENV
===============================
- In Replit secrets, set:
  - `UPSTREAM_BASE_URL` = `https://<your-data-proxy>` (e.g. your Tuya proxy).
  - `UPSTREAM_BEARER`   = `<token-if-needed>`.
  - `PORT`              = `3000`.
- After running, open the webview and navigate through Devices → Dashboard → Energy.


This prompt will generate the full code (server and client) in one shot. After it finishes, set your UPSTREAM_BASE_URL to point at whatever backend returns device lists and time‑series data (e.g., the Tuya proxy you built earlier).

# Append these files and updates to your existing Tuya project

===============================
Add new NPM packages
===============================
- date-fns, date-fns-tz, recharts, zustand, @tanstack/react-router

===============================
Update server/index.js
===============================
import { proxySummary, proxySeries } from "./proxy.js";  // new
...
app.get("/api/summary", proxySummary);
app.get("/api/series", proxySeries);

===============================
Create server/proxy.js and server/agg.js
===============================
... (proxy.js & agg.js from the energy UI prompt)

===============================
Update client/src and router
===============================
- Add pages: Dashboard.jsx and Energy.jsx
- Add components: DevicePicker.jsx, Cards.jsx, ChartPanel.jsx, CalendarPicker.jsx
- Add Zustand store: useAppStore.js
- Add styles.css and update App.jsx to include navigation
